//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;


using NopSolutions.NopCommerce.BusinessLogic.Audit;
using NopSolutions.NopCommerce.BusinessLogic.Categories;
using NopSolutions.NopCommerce.BusinessLogic.Configuration.Settings;
using NopSolutions.NopCommerce.BusinessLogic.Content.Blog;
using NopSolutions.NopCommerce.BusinessLogic.Content.Forums;
using NopSolutions.NopCommerce.BusinessLogic.Content.NewsManagement;
using NopSolutions.NopCommerce.BusinessLogic.Content.Polls;
using NopSolutions.NopCommerce.BusinessLogic.Content.Topics;
using NopSolutions.NopCommerce.BusinessLogic.CustomerManagement;
using NopSolutions.NopCommerce.BusinessLogic.Directory;
using NopSolutions.NopCommerce.BusinessLogic.Localization;
using NopSolutions.NopCommerce.BusinessLogic.Manufacturers;
using NopSolutions.NopCommerce.BusinessLogic.Measures;
using NopSolutions.NopCommerce.BusinessLogic.Media;
using NopSolutions.NopCommerce.BusinessLogic.Messages;
using NopSolutions.NopCommerce.BusinessLogic.Messages.SMS;
using NopSolutions.NopCommerce.BusinessLogic.Orders;
using NopSolutions.NopCommerce.BusinessLogic.Payment;
using NopSolutions.NopCommerce.BusinessLogic.Products;
using NopSolutions.NopCommerce.BusinessLogic.Products.Attributes;
using NopSolutions.NopCommerce.BusinessLogic.Products.Specs;
using NopSolutions.NopCommerce.BusinessLogic.Promo.Affiliates;
using NopSolutions.NopCommerce.BusinessLogic.Promo.Campaigns;
using NopSolutions.NopCommerce.BusinessLogic.Promo.Discounts;
using NopSolutions.NopCommerce.BusinessLogic.QuickBooks;
using NopSolutions.NopCommerce.BusinessLogic.Security;
using NopSolutions.NopCommerce.BusinessLogic.Shipping;
using NopSolutions.NopCommerce.BusinessLogic.Tax;
using NopSolutions.NopCommerce.BusinessLogic.Templates;
using NopSolutions.NopCommerce.BusinessLogic.Warehouses;


namespace NopSolutions.NopCommerce.BusinessLogic.Data
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class NopObjectContext : ObjectContext
    {
    
        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="startTime">No Metadata Documentation available.</param>
        /// <param name="endTime">No Metadata Documentation available.</param>
        /// <param name="orderStatusID">No Metadata Documentation available.</param>
        /// <param name="paymentStatusID">No Metadata Documentation available.</param>
        /// <param name="shippingStatusID">No Metadata Documentation available.</param>
        /// <param name="orderBy">No Metadata Documentation available.</param>
        public ObjectResult<CustomerBestReportLine> Sp_CustomerBestReport(Nullable<global::System.DateTime> startTime, Nullable<global::System.DateTime> endTime, Nullable<global::System.Int32> orderStatusID, Nullable<global::System.Int32> paymentStatusID, Nullable<global::System.Int32> shippingStatusID, Nullable<global::System.Int32> orderBy)
        {
            ObjectParameter startTimeParameter;
            if (startTime.HasValue)
            {
                startTimeParameter = new ObjectParameter("StartTime", startTime);
            }
            else
            {
                startTimeParameter = new ObjectParameter("StartTime", typeof(global::System.DateTime));
            }
    
            ObjectParameter endTimeParameter;
            if (endTime.HasValue)
            {
                endTimeParameter = new ObjectParameter("EndTime", endTime);
            }
            else
            {
                endTimeParameter = new ObjectParameter("EndTime", typeof(global::System.DateTime));
            }
    
            ObjectParameter orderStatusIDParameter;
            if (orderStatusID.HasValue)
            {
                orderStatusIDParameter = new ObjectParameter("OrderStatusID", orderStatusID);
            }
            else
            {
                orderStatusIDParameter = new ObjectParameter("OrderStatusID", typeof(global::System.Int32));
            }
    
            ObjectParameter paymentStatusIDParameter;
            if (paymentStatusID.HasValue)
            {
                paymentStatusIDParameter = new ObjectParameter("PaymentStatusID", paymentStatusID);
            }
            else
            {
                paymentStatusIDParameter = new ObjectParameter("PaymentStatusID", typeof(global::System.Int32));
            }
    
            ObjectParameter shippingStatusIDParameter;
            if (shippingStatusID.HasValue)
            {
                shippingStatusIDParameter = new ObjectParameter("ShippingStatusID", shippingStatusID);
            }
            else
            {
                shippingStatusIDParameter = new ObjectParameter("ShippingStatusID", typeof(global::System.Int32));
            }
    
            ObjectParameter orderByParameter;
            if (orderBy.HasValue)
            {
                orderByParameter = new ObjectParameter("OrderBy", orderBy);
            }
            else
            {
                orderByParameter = new ObjectParameter("OrderBy", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<CustomerBestReportLine>("Sp_CustomerBestReport", startTimeParameter, endTimeParameter, orderStatusIDParameter, paymentStatusIDParameter, shippingStatusIDParameter, orderByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="customerAttributeKey">No Metadata Documentation available.</param>
        public ObjectResult<CustomerReportByAttributeKeyLine> Sp_CustomerReportByAttributeKey(global::System.String customerAttributeKey)
        {
            ObjectParameter customerAttributeKeyParameter;
            if (customerAttributeKey != null)
            {
                customerAttributeKeyParameter = new ObjectParameter("CustomerAttributeKey", customerAttributeKey);
            }
            else
            {
                customerAttributeKeyParameter = new ObjectParameter("CustomerAttributeKey", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<CustomerReportByAttributeKeyLine>("Sp_CustomerReportByAttributeKey", customerAttributeKeyParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="languageID">No Metadata Documentation available.</param>
        /// <param name="xmlPackage">No Metadata Documentation available.</param>
        public int Sp_LanguagePackExport(Nullable<global::System.Int32> languageID, ObjectParameter xmlPackage)
        {
            ObjectParameter languageIDParameter;
            if (languageID.HasValue)
            {
                languageIDParameter = new ObjectParameter("LanguageID", languageID);
            }
            else
            {
                languageIDParameter = new ObjectParameter("LanguageID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("Sp_LanguagePackExport", languageIDParameter, xmlPackage);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="languageID">No Metadata Documentation available.</param>
        /// <param name="xmlPackage">No Metadata Documentation available.</param>
        public int Sp_LanguagePackImport(Nullable<global::System.Int32> languageID, global::System.String xmlPackage)
        {
            ObjectParameter languageIDParameter;
            if (languageID.HasValue)
            {
                languageIDParameter = new ObjectParameter("LanguageID", languageID);
            }
            else
            {
                languageIDParameter = new ObjectParameter("LanguageID", typeof(global::System.Int32));
            }
    
            ObjectParameter xmlPackageParameter;
            if (xmlPackage != null)
            {
                xmlPackageParameter = new ObjectParameter("XmlPackage", xmlPackage);
            }
            else
            {
                xmlPackageParameter = new ObjectParameter("XmlPackage", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("Sp_LanguagePackImport", languageIDParameter, xmlPackageParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public int Sp_Maintenance_ReindexTables()
        {
            return base.ExecuteFunction("Sp_Maintenance_ReindexTables");
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="startTime">No Metadata Documentation available.</param>
        /// <param name="endTime">No Metadata Documentation available.</param>
        /// <param name="orderStatusID">No Metadata Documentation available.</param>
        /// <param name="paymentStatusID">No Metadata Documentation available.</param>
        /// <param name="billingCountryID">No Metadata Documentation available.</param>
        public ObjectResult<OrderProductVariantReportLine> Sp_OrderProductVariantReport(Nullable<global::System.DateTime> startTime, Nullable<global::System.DateTime> endTime, Nullable<global::System.Int32> orderStatusID, Nullable<global::System.Int32> paymentStatusID, Nullable<global::System.Int32> billingCountryID)
        {
            ObjectParameter startTimeParameter;
            if (startTime.HasValue)
            {
                startTimeParameter = new ObjectParameter("StartTime", startTime);
            }
            else
            {
                startTimeParameter = new ObjectParameter("StartTime", typeof(global::System.DateTime));
            }
    
            ObjectParameter endTimeParameter;
            if (endTime.HasValue)
            {
                endTimeParameter = new ObjectParameter("EndTime", endTime);
            }
            else
            {
                endTimeParameter = new ObjectParameter("EndTime", typeof(global::System.DateTime));
            }
    
            ObjectParameter orderStatusIDParameter;
            if (orderStatusID.HasValue)
            {
                orderStatusIDParameter = new ObjectParameter("OrderStatusID", orderStatusID);
            }
            else
            {
                orderStatusIDParameter = new ObjectParameter("OrderStatusID", typeof(global::System.Int32));
            }
    
            ObjectParameter paymentStatusIDParameter;
            if (paymentStatusID.HasValue)
            {
                paymentStatusIDParameter = new ObjectParameter("PaymentStatusID", paymentStatusID);
            }
            else
            {
                paymentStatusIDParameter = new ObjectParameter("PaymentStatusID", typeof(global::System.Int32));
            }
    
            ObjectParameter billingCountryIDParameter;
            if (billingCountryID.HasValue)
            {
                billingCountryIDParameter = new ObjectParameter("BillingCountryID", billingCountryID);
            }
            else
            {
                billingCountryIDParameter = new ObjectParameter("BillingCountryID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<OrderProductVariantReportLine>("Sp_OrderProductVariantReport", startTimeParameter, endTimeParameter, orderStatusIDParameter, paymentStatusIDParameter, billingCountryIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="productID">No Metadata Documentation available.</param>
        /// <param name="showHidden">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="totalRecords">No Metadata Documentation available.</param>
        public ObjectResult<Product> Sp_ProductAlsoPurchasedLoadByProductID(Nullable<global::System.Int32> productID, Nullable<global::System.Boolean> showHidden, Nullable<global::System.Int32> pageIndex, Nullable<global::System.Int32> pageSize, ObjectParameter totalRecords)
        {
            ObjectParameter productIDParameter;
            if (productID.HasValue)
            {
                productIDParameter = new ObjectParameter("ProductID", productID);
            }
            else
            {
                productIDParameter = new ObjectParameter("ProductID", typeof(global::System.Int32));
            }
    
            ObjectParameter showHiddenParameter;
            if (showHidden.HasValue)
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", showHidden);
            }
            else
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", typeof(global::System.Boolean));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("PageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("PageIndex", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("PageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("PageSize", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Product>("Sp_ProductAlsoPurchasedLoadByProductID", productIDParameter, showHiddenParameter, pageIndexParameter, pageSizeParameter, totalRecords);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="productID">No Metadata Documentation available.</param>
        /// <param name="showHidden">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="totalRecords">No Metadata Documentation available.</param>
        public ObjectResult<Product> Sp_ProductAlsoPurchasedLoadByProductID(Nullable<global::System.Int32> productID, Nullable<global::System.Boolean> showHidden, Nullable<global::System.Int32> pageIndex, Nullable<global::System.Int32> pageSize, ObjectParameter totalRecords, MergeOption mergeOption)
        {
            ObjectParameter productIDParameter;
            if (productID.HasValue)
            {
                productIDParameter = new ObjectParameter("ProductID", productID);
            }
            else
            {
                productIDParameter = new ObjectParameter("ProductID", typeof(global::System.Int32));
            }
    
            ObjectParameter showHiddenParameter;
            if (showHidden.HasValue)
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", showHidden);
            }
            else
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", typeof(global::System.Boolean));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("PageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("PageIndex", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("PageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("PageSize", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Product>("Sp_ProductAlsoPurchasedLoadByProductID", mergeOption, productIDParameter, showHiddenParameter, pageIndexParameter, pageSizeParameter, totalRecords);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="categoryID">No Metadata Documentation available.</param>
        /// <param name="manufacturerID">No Metadata Documentation available.</param>
        /// <param name="productTagID">No Metadata Documentation available.</param>
        /// <param name="featuredProducts">No Metadata Documentation available.</param>
        /// <param name="priceMin">No Metadata Documentation available.</param>
        /// <param name="priceMax">No Metadata Documentation available.</param>
        /// <param name="relatedToProductID">No Metadata Documentation available.</param>
        /// <param name="keywords">No Metadata Documentation available.</param>
        /// <param name="searchDescriptions">No Metadata Documentation available.</param>
        /// <param name="showHidden">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="filteredSpecs">No Metadata Documentation available.</param>
        /// <param name="languageID">No Metadata Documentation available.</param>
        /// <param name="orderBy">No Metadata Documentation available.</param>
        /// <param name="totalRecords">No Metadata Documentation available.</param>
        public ObjectResult<Product> Sp_ProductLoadAllPaged(Nullable<global::System.Int32> categoryID, Nullable<global::System.Int32> manufacturerID, Nullable<global::System.Int32> productTagID, Nullable<global::System.Boolean> featuredProducts, Nullable<global::System.Decimal> priceMin, Nullable<global::System.Decimal> priceMax, Nullable<global::System.Int32> relatedToProductID, global::System.String keywords, Nullable<global::System.Boolean> searchDescriptions, Nullable<global::System.Boolean> showHidden, Nullable<global::System.Int32> pageIndex, Nullable<global::System.Int32> pageSize, global::System.String filteredSpecs, Nullable<global::System.Int32> languageID, Nullable<global::System.Int32> orderBy, ObjectParameter totalRecords)
        {
            ObjectParameter categoryIDParameter;
            if (categoryID.HasValue)
            {
                categoryIDParameter = new ObjectParameter("CategoryID", categoryID);
            }
            else
            {
                categoryIDParameter = new ObjectParameter("CategoryID", typeof(global::System.Int32));
            }
    
            ObjectParameter manufacturerIDParameter;
            if (manufacturerID.HasValue)
            {
                manufacturerIDParameter = new ObjectParameter("ManufacturerID", manufacturerID);
            }
            else
            {
                manufacturerIDParameter = new ObjectParameter("ManufacturerID", typeof(global::System.Int32));
            }
    
            ObjectParameter productTagIDParameter;
            if (productTagID.HasValue)
            {
                productTagIDParameter = new ObjectParameter("ProductTagID", productTagID);
            }
            else
            {
                productTagIDParameter = new ObjectParameter("ProductTagID", typeof(global::System.Int32));
            }
    
            ObjectParameter featuredProductsParameter;
            if (featuredProducts.HasValue)
            {
                featuredProductsParameter = new ObjectParameter("FeaturedProducts", featuredProducts);
            }
            else
            {
                featuredProductsParameter = new ObjectParameter("FeaturedProducts", typeof(global::System.Boolean));
            }
    
            ObjectParameter priceMinParameter;
            if (priceMin.HasValue)
            {
                priceMinParameter = new ObjectParameter("PriceMin", priceMin);
            }
            else
            {
                priceMinParameter = new ObjectParameter("PriceMin", typeof(global::System.Decimal));
            }
    
            ObjectParameter priceMaxParameter;
            if (priceMax.HasValue)
            {
                priceMaxParameter = new ObjectParameter("PriceMax", priceMax);
            }
            else
            {
                priceMaxParameter = new ObjectParameter("PriceMax", typeof(global::System.Decimal));
            }
    
            ObjectParameter relatedToProductIDParameter;
            if (relatedToProductID.HasValue)
            {
                relatedToProductIDParameter = new ObjectParameter("RelatedToProductID", relatedToProductID);
            }
            else
            {
                relatedToProductIDParameter = new ObjectParameter("RelatedToProductID", typeof(global::System.Int32));
            }
    
            ObjectParameter keywordsParameter;
            if (keywords != null)
            {
                keywordsParameter = new ObjectParameter("Keywords", keywords);
            }
            else
            {
                keywordsParameter = new ObjectParameter("Keywords", typeof(global::System.String));
            }
    
            ObjectParameter searchDescriptionsParameter;
            if (searchDescriptions.HasValue)
            {
                searchDescriptionsParameter = new ObjectParameter("SearchDescriptions", searchDescriptions);
            }
            else
            {
                searchDescriptionsParameter = new ObjectParameter("SearchDescriptions", typeof(global::System.Boolean));
            }
    
            ObjectParameter showHiddenParameter;
            if (showHidden.HasValue)
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", showHidden);
            }
            else
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", typeof(global::System.Boolean));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("PageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("PageIndex", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("PageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("PageSize", typeof(global::System.Int32));
            }
    
            ObjectParameter filteredSpecsParameter;
            if (filteredSpecs != null)
            {
                filteredSpecsParameter = new ObjectParameter("FilteredSpecs", filteredSpecs);
            }
            else
            {
                filteredSpecsParameter = new ObjectParameter("FilteredSpecs", typeof(global::System.String));
            }
    
            ObjectParameter languageIDParameter;
            if (languageID.HasValue)
            {
                languageIDParameter = new ObjectParameter("LanguageID", languageID);
            }
            else
            {
                languageIDParameter = new ObjectParameter("LanguageID", typeof(global::System.Int32));
            }
    
            ObjectParameter orderByParameter;
            if (orderBy.HasValue)
            {
                orderByParameter = new ObjectParameter("OrderBy", orderBy);
            }
            else
            {
                orderByParameter = new ObjectParameter("OrderBy", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Product>("Sp_ProductLoadAllPaged", categoryIDParameter, manufacturerIDParameter, productTagIDParameter, featuredProductsParameter, priceMinParameter, priceMaxParameter, relatedToProductIDParameter, keywordsParameter, searchDescriptionsParameter, showHiddenParameter, pageIndexParameter, pageSizeParameter, filteredSpecsParameter, languageIDParameter, orderByParameter, totalRecords);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="categoryID">No Metadata Documentation available.</param>
        /// <param name="manufacturerID">No Metadata Documentation available.</param>
        /// <param name="productTagID">No Metadata Documentation available.</param>
        /// <param name="featuredProducts">No Metadata Documentation available.</param>
        /// <param name="priceMin">No Metadata Documentation available.</param>
        /// <param name="priceMax">No Metadata Documentation available.</param>
        /// <param name="relatedToProductID">No Metadata Documentation available.</param>
        /// <param name="keywords">No Metadata Documentation available.</param>
        /// <param name="searchDescriptions">No Metadata Documentation available.</param>
        /// <param name="showHidden">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="filteredSpecs">No Metadata Documentation available.</param>
        /// <param name="languageID">No Metadata Documentation available.</param>
        /// <param name="orderBy">No Metadata Documentation available.</param>
        /// <param name="totalRecords">No Metadata Documentation available.</param>
        public ObjectResult<Product> Sp_ProductLoadAllPaged(Nullable<global::System.Int32> categoryID, Nullable<global::System.Int32> manufacturerID, Nullable<global::System.Int32> productTagID, Nullable<global::System.Boolean> featuredProducts, Nullable<global::System.Decimal> priceMin, Nullable<global::System.Decimal> priceMax, Nullable<global::System.Int32> relatedToProductID, global::System.String keywords, Nullable<global::System.Boolean> searchDescriptions, Nullable<global::System.Boolean> showHidden, Nullable<global::System.Int32> pageIndex, Nullable<global::System.Int32> pageSize, global::System.String filteredSpecs, Nullable<global::System.Int32> languageID, Nullable<global::System.Int32> orderBy, ObjectParameter totalRecords, MergeOption mergeOption)
        {
            ObjectParameter categoryIDParameter;
            if (categoryID.HasValue)
            {
                categoryIDParameter = new ObjectParameter("CategoryID", categoryID);
            }
            else
            {
                categoryIDParameter = new ObjectParameter("CategoryID", typeof(global::System.Int32));
            }
    
            ObjectParameter manufacturerIDParameter;
            if (manufacturerID.HasValue)
            {
                manufacturerIDParameter = new ObjectParameter("ManufacturerID", manufacturerID);
            }
            else
            {
                manufacturerIDParameter = new ObjectParameter("ManufacturerID", typeof(global::System.Int32));
            }
    
            ObjectParameter productTagIDParameter;
            if (productTagID.HasValue)
            {
                productTagIDParameter = new ObjectParameter("ProductTagID", productTagID);
            }
            else
            {
                productTagIDParameter = new ObjectParameter("ProductTagID", typeof(global::System.Int32));
            }
    
            ObjectParameter featuredProductsParameter;
            if (featuredProducts.HasValue)
            {
                featuredProductsParameter = new ObjectParameter("FeaturedProducts", featuredProducts);
            }
            else
            {
                featuredProductsParameter = new ObjectParameter("FeaturedProducts", typeof(global::System.Boolean));
            }
    
            ObjectParameter priceMinParameter;
            if (priceMin.HasValue)
            {
                priceMinParameter = new ObjectParameter("PriceMin", priceMin);
            }
            else
            {
                priceMinParameter = new ObjectParameter("PriceMin", typeof(global::System.Decimal));
            }
    
            ObjectParameter priceMaxParameter;
            if (priceMax.HasValue)
            {
                priceMaxParameter = new ObjectParameter("PriceMax", priceMax);
            }
            else
            {
                priceMaxParameter = new ObjectParameter("PriceMax", typeof(global::System.Decimal));
            }
    
            ObjectParameter relatedToProductIDParameter;
            if (relatedToProductID.HasValue)
            {
                relatedToProductIDParameter = new ObjectParameter("RelatedToProductID", relatedToProductID);
            }
            else
            {
                relatedToProductIDParameter = new ObjectParameter("RelatedToProductID", typeof(global::System.Int32));
            }
    
            ObjectParameter keywordsParameter;
            if (keywords != null)
            {
                keywordsParameter = new ObjectParameter("Keywords", keywords);
            }
            else
            {
                keywordsParameter = new ObjectParameter("Keywords", typeof(global::System.String));
            }
    
            ObjectParameter searchDescriptionsParameter;
            if (searchDescriptions.HasValue)
            {
                searchDescriptionsParameter = new ObjectParameter("SearchDescriptions", searchDescriptions);
            }
            else
            {
                searchDescriptionsParameter = new ObjectParameter("SearchDescriptions", typeof(global::System.Boolean));
            }
    
            ObjectParameter showHiddenParameter;
            if (showHidden.HasValue)
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", showHidden);
            }
            else
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", typeof(global::System.Boolean));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("PageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("PageIndex", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("PageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("PageSize", typeof(global::System.Int32));
            }
    
            ObjectParameter filteredSpecsParameter;
            if (filteredSpecs != null)
            {
                filteredSpecsParameter = new ObjectParameter("FilteredSpecs", filteredSpecs);
            }
            else
            {
                filteredSpecsParameter = new ObjectParameter("FilteredSpecs", typeof(global::System.String));
            }
    
            ObjectParameter languageIDParameter;
            if (languageID.HasValue)
            {
                languageIDParameter = new ObjectParameter("LanguageID", languageID);
            }
            else
            {
                languageIDParameter = new ObjectParameter("LanguageID", typeof(global::System.Int32));
            }
    
            ObjectParameter orderByParameter;
            if (orderBy.HasValue)
            {
                orderByParameter = new ObjectParameter("OrderBy", orderBy);
            }
            else
            {
                orderByParameter = new ObjectParameter("OrderBy", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Product>("Sp_ProductLoadAllPaged", mergeOption, categoryIDParameter, manufacturerIDParameter, productTagIDParameter, featuredProductsParameter, priceMinParameter, priceMaxParameter, relatedToProductIDParameter, keywordsParameter, searchDescriptionsParameter, showHiddenParameter, pageIndexParameter, pageSizeParameter, filteredSpecsParameter, languageIDParameter, orderByParameter, totalRecords);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="categoryID">No Metadata Documentation available.</param>
        /// <param name="manufacturerID">No Metadata Documentation available.</param>
        /// <param name="keywords">No Metadata Documentation available.</param>
        /// <param name="showHidden">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="totalRecords">No Metadata Documentation available.</param>
        public ObjectResult<ProductVariant> Sp_ProductVariantLoadAll(Nullable<global::System.Int32> categoryID, Nullable<global::System.Int32> manufacturerID, global::System.String keywords, Nullable<global::System.Boolean> showHidden, Nullable<global::System.Int32> pageIndex, Nullable<global::System.Int32> pageSize, ObjectParameter totalRecords)
        {
            ObjectParameter categoryIDParameter;
            if (categoryID.HasValue)
            {
                categoryIDParameter = new ObjectParameter("CategoryID", categoryID);
            }
            else
            {
                categoryIDParameter = new ObjectParameter("CategoryID", typeof(global::System.Int32));
            }
    
            ObjectParameter manufacturerIDParameter;
            if (manufacturerID.HasValue)
            {
                manufacturerIDParameter = new ObjectParameter("ManufacturerID", manufacturerID);
            }
            else
            {
                manufacturerIDParameter = new ObjectParameter("ManufacturerID", typeof(global::System.Int32));
            }
    
            ObjectParameter keywordsParameter;
            if (keywords != null)
            {
                keywordsParameter = new ObjectParameter("Keywords", keywords);
            }
            else
            {
                keywordsParameter = new ObjectParameter("Keywords", typeof(global::System.String));
            }
    
            ObjectParameter showHiddenParameter;
            if (showHidden.HasValue)
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", showHidden);
            }
            else
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", typeof(global::System.Boolean));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("PageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("PageIndex", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("PageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("PageSize", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<ProductVariant>("Sp_ProductVariantLoadAll", categoryIDParameter, manufacturerIDParameter, keywordsParameter, showHiddenParameter, pageIndexParameter, pageSizeParameter, totalRecords);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="categoryID">No Metadata Documentation available.</param>
        /// <param name="manufacturerID">No Metadata Documentation available.</param>
        /// <param name="keywords">No Metadata Documentation available.</param>
        /// <param name="showHidden">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="totalRecords">No Metadata Documentation available.</param>
        public ObjectResult<ProductVariant> Sp_ProductVariantLoadAll(Nullable<global::System.Int32> categoryID, Nullable<global::System.Int32> manufacturerID, global::System.String keywords, Nullable<global::System.Boolean> showHidden, Nullable<global::System.Int32> pageIndex, Nullable<global::System.Int32> pageSize, ObjectParameter totalRecords, MergeOption mergeOption)
        {
            ObjectParameter categoryIDParameter;
            if (categoryID.HasValue)
            {
                categoryIDParameter = new ObjectParameter("CategoryID", categoryID);
            }
            else
            {
                categoryIDParameter = new ObjectParameter("CategoryID", typeof(global::System.Int32));
            }
    
            ObjectParameter manufacturerIDParameter;
            if (manufacturerID.HasValue)
            {
                manufacturerIDParameter = new ObjectParameter("ManufacturerID", manufacturerID);
            }
            else
            {
                manufacturerIDParameter = new ObjectParameter("ManufacturerID", typeof(global::System.Int32));
            }
    
            ObjectParameter keywordsParameter;
            if (keywords != null)
            {
                keywordsParameter = new ObjectParameter("Keywords", keywords);
            }
            else
            {
                keywordsParameter = new ObjectParameter("Keywords", typeof(global::System.String));
            }
    
            ObjectParameter showHiddenParameter;
            if (showHidden.HasValue)
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", showHidden);
            }
            else
            {
                showHiddenParameter = new ObjectParameter("ShowHidden", typeof(global::System.Boolean));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("PageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("PageIndex", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("PageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("PageSize", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<ProductVariant>("Sp_ProductVariantLoadAll", mergeOption, categoryIDParameter, manufacturerIDParameter, keywordsParameter, showHiddenParameter, pageIndexParameter, pageSizeParameter, totalRecords);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="lastDays">No Metadata Documentation available.</param>
        /// <param name="recordsToReturn">No Metadata Documentation available.</param>
        /// <param name="orderBy">No Metadata Documentation available.</param>
        public ObjectResult<BestSellersReportLine> Sp_SalesBestSellersReport(Nullable<global::System.Int32> lastDays, Nullable<global::System.Int32> recordsToReturn, Nullable<global::System.Int32> orderBy)
        {
            ObjectParameter lastDaysParameter;
            if (lastDays.HasValue)
            {
                lastDaysParameter = new ObjectParameter("LastDays", lastDays);
            }
            else
            {
                lastDaysParameter = new ObjectParameter("LastDays", typeof(global::System.Int32));
            }
    
            ObjectParameter recordsToReturnParameter;
            if (recordsToReturn.HasValue)
            {
                recordsToReturnParameter = new ObjectParameter("RecordsToReturn", recordsToReturn);
            }
            else
            {
                recordsToReturnParameter = new ObjectParameter("RecordsToReturn", typeof(global::System.Int32));
            }
    
            ObjectParameter orderByParameter;
            if (orderBy.HasValue)
            {
                orderByParameter = new ObjectParameter("OrderBy", orderBy);
            }
            else
            {
                orderByParameter = new ObjectParameter("OrderBy", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<BestSellersReportLine>("Sp_SalesBestSellersReport", lastDaysParameter, recordsToReturnParameter, orderByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="categoryID">No Metadata Documentation available.</param>
        /// <param name="languageID">No Metadata Documentation available.</param>
        public ObjectResult<SpecificationAttributeOptionFilter> Sp_SpecificationAttributeOptionFilter_LoadByFilter(Nullable<global::System.Int32> categoryID, Nullable<global::System.Int32> languageID)
        {
            ObjectParameter categoryIDParameter;
            if (categoryID.HasValue)
            {
                categoryIDParameter = new ObjectParameter("CategoryID", categoryID);
            }
            else
            {
                categoryIDParameter = new ObjectParameter("CategoryID", typeof(global::System.Int32));
            }
    
            ObjectParameter languageIDParameter;
            if (languageID.HasValue)
            {
                languageIDParameter = new ObjectParameter("LanguageID", languageID);
            }
            else
            {
                languageIDParameter = new ObjectParameter("LanguageID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<SpecificationAttributeOptionFilter>("Sp_SpecificationAttributeOptionFilter_LoadByFilter", categoryIDParameter, languageIDParameter);
        }

        #endregion
    }
    

    #endregion
    
    
}
